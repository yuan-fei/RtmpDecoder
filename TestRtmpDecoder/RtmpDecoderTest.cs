using RtmpDecoder;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using FluorineFx.Messaging.Rtmp;

namespace TestRtmpDecoder
{
    
    
    /// <summary>
    ///This is a test class for RtmpDecoderTest and is intended
    ///to contain all RtmpDecoderTest Unit Tests
    ///</summary>
  [TestClass()]
  public class RtmpDecoderTest
  {


    private TestContext testContextInstance;

    /// <summary>
    ///Gets or sets the test context which provides
    ///information about and functionality for the current test run.
    ///</summary>
    public TestContext TestContext
    {
      get
      {
        return testContextInstance;
      }
      set
      {
        testContextInstance = value;
      }
    }

    #region Additional test attributes
    // 
    //You can use the following additional attributes as you write your tests:
    //
    //Use ClassInitialize to run code before running the first test in the class
    //[ClassInitialize()]
    //public static void MyClassInitialize(TestContext testContext)
    //{
    //}
    //
    //Use ClassCleanup to run code after all tests in a class have run
    //[ClassCleanup()]
    //public static void MyClassCleanup()
    //{
    //}
    //
    //Use TestInitialize to run code before running each test
    //[TestInitialize()]
    //public void MyTestInitialize()
    //{
    //}
    //
    //Use TestCleanup to run code after each test has run
    //[TestCleanup()]
    //public void MyTestCleanup()
    //{
    //}
    //
    #endregion


    /// <summary>
    ///A test for DecodePackets
    ///</summary>
    [TestMethod()]
    public void DecodePacketsTest()
    {
      RtmpDecoder.RtmpDecoder target = new RtmpDecoder.RtmpDecoder(); // TODO: Initialize to an appropriate value
      byte[] bytes = new byte[] { 0x43, 0x00, 0x00, 0x00, 0x00, 0x03, 0xB7, 0x13, 0x00, 0x11, 0x49, 0x47, 0x54, 0x5F, 0x5F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x45, 0x32, 0x33, 0x33, 0x35, 0x41, 0x41, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x93, 0x00, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x2C, 0x49, 0x47, 0x54, 0x2E, 0x53, 0x42, 0x2E, 0x4D, 0x4D, 0x52, 0x2E, 0x52, 0x54, 0x4D, 0x50, 0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2E, 0x53, 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x53, 0x6C, 0x6F, 0x74, 0x00, 0x0A, 0x4C, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x0B, 0x42, 0x73, 0xD1, 0x0F, 0x50, 0x1C, 0x60, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x23, 0x49, 0x47, 0x54, 0x2E, 0x53, 0x42, 0x2E, 0xC3, 0x4D, 0x4D, 0x52, 0x2E, 0x42, 0x75, 0x73, 0x69, 0x6E, 0x65, 0x73, 0x73, 0x45, 0x6E, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2E, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x49, 0x64, 0x00, 0x40, 0x66, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x49, 0x64, 0x00, 0x40, 0x65, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x02, 0x00, 0x14, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x36, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x34, 0x33, 0xC3, 0x34, 0x00, 0x05, 0x45, 0x67, 0x6D, 0x49, 0x64, 0x02, 0x00, 0x10, 0x49, 0x47, 0x54, 0x5F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x45, 0x32, 0x33, 0x33, 0x35, 0x41, 0x41, 0x00, 0x0D, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4E, 0x61, 0x6D, 0x65, 0x02, 0x00, 0x04, 0x4C, 0x49, 0x4E, 0x47, 0x00, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x02, 0x00, 0x04, 0x4C, 0x49, 0x4E, 0x47, 0x00, 0x08, 0x4C, 0x61, 0x73, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x02, 0x00, 0x04, 0x48, 0x45, 0x4E, 0x47, 0x00, 0x09, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x02, 0x00, 0x00, 0x00, 0x08, 0x52, 0x61, 0x6E, 0x6B, 0x4E, 0x61, 0x6D, 0x65, 0x02, 0x00, 0x00, 0x00, 0x06, 0x52, 0x61, 0x6E, 0x6B, 0x49, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x08, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x65, 0x49, 0x64, 0x02, 0x00, 0x05, 0x65, 0x6E, 0x5F, 0x55, 0x53, 0x00, 0x11, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x00, 0x40, 0x8F, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x49, 0x73, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x01, 0x00, 0x00, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x05, 0x00, 0x03, 0x41, 0x67, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x73, 0x41, 0x6E, 0x6E, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x01, 0x00, 0x00, 0x0B, 0x41, 0x6E, 0x6E, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x05, 0x00, 0x06, 0x48, 0x61, 0x73, 0x50, 0x69, 0x6E, 0x01, 0x01, 0x00, 0x0B, 0xC3, 0x49, 0x73, 0x50, 0x69, 0x6E, 0x4C, 0x6F, 0x63, 0x6B, 0x65, 0x64, 0x01, 0x00, 0x00, 0x0B, 0x49, 0x73, 0x41, 0x62, 0x61, 0x6E, 0x64, 0x6F, 0x6E, 0x65, 0x64, 0x01, 0x00, 0x00, 0x08, 0x49, 0x73, 0x42, 0x61, 0x6E, 0x6E, 0x65, 0x64, 0x01, 0x00, 0x00, 0x0C, 0x49, 0x73, 0x53, 0x65, 0x6C, 0x66, 0x42, 0x61, 0x6E, 0x6E, 0x65, 0x64, 0x01, 0x00, 0x00, 0x0B, 0x49, 0x73, 0x44, 0x75, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x01, 0x00, 0x00, 0x11, 0x44, 0x75, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x02, 0x00, 0x00, 0x00, 0x13, 0x45, 0x67, 0x6D, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x50, 0x6C, 0x61, 0x79, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x01, 0x00, 0x00, 0x16, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6F, 0x69, 0x6E, 0xC3, 0x74, 0x50, 0x6C, 0x61, 0x79, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x01, 0x01, 0x00, 0x15, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6C, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x40, 0x8F, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x45, 0x67, 0x6D, 0x58, 0x74, 0x72, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x01, 0x01, 0x00, 0x17, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x58, 0x74, 0x72, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x01, 0x01, 0x00, 0x10, 0x58, 0x74, 0x72, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x73, 0x00, 0x40, 0x72, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x58, 0x74, 0xC3, 0x72, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x40, 0x72, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x46, 0x72, 0x65, 0x65, 0x50, 0x6C, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x01, 0x00, 0x00, 0x11, 0x47, 0x69, 0x66, 0x74, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x01, 0x00, 0x00, 0x0D, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6D, 0x65, 0x0B, 0x42, 0x73, 0xD1, 0x0F, 0x4F, 0xB3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x57, 0x61, 0x74, 0x49, 0x73, 0x50, 0x69, 0x6E, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x05, 0x00, 0x15, 0x57, 0x61, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6E, 0x41, 0x75, 0x74, 0x6F, 0x54, 0x72, 0x61, 0x6E, 0x73, 0xC3, 0x66, 0x65, 0x72, 0x05, 0x00, 0x16, 0x57, 0x61, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4F, 0x75, 0x74, 0x41, 0x75, 0x74, 0x6F, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x65, 0x72, 0x05, 0x00, 0x11, 0x57, 0x61, 0x74, 0x41, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x05, 0x00, 0x00, 0x09, 0x00, 0x00, 0x09 };
      List<object> actual;
      actual = target.DecodePackets(bytes);
      Assert.AreEqual(1, actual.Count);
      Assert.AreEqual(typeof(RtmpPacket),actual[0].GetType());
    }

    /// <summary>
    ///A test for DecodePackets
    ///</summary>
    [TestMethod()]
    public void DecodePacketsTestEmptyByteArray()
    {
      RtmpDecoder.RtmpDecoder target = new RtmpDecoder.RtmpDecoder(); // TODO: Initialize to an appropriate value
      byte[] bytes = new byte[0];
      List<object> actual;
      actual = target.DecodePackets(bytes);
      Assert.IsNull(actual);
    }
  }
}
